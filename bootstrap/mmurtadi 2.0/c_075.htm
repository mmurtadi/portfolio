<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>Files: open(), read(), write(), close()</title>
</head>

<body>

<h1 align="center"><b>C Programming</b></h1>

<p><a href="default.htm"><img src="images/menu.gif" width="60"
height="20"></a> <a href="c_074.htm"><img
src="images/previous.gif" width="60" height="20"></a> <a
href="c_075a.htm"><img src="images/next.gif" width="60"
height="20"></a></p>

<p><b>File handling using open(), read(), write() and close()</b><br>
The previous examples of file handling deal with File Control
Blocks (FCB). Under MSDOS v3.x (or greater) and UNIX systems,
file handling is often done using handles, rather than file
control blocks.</p>

<p>Writing programs using handles ensures portability of source
code between different operating systems. Using handles allows
the programmer to treat the file as a stream of characters.</p>

<hr>

<p><b>open()</b><br>
</p>

<pre><i>
	#include &lt;fcntl.h&gt;
	int  open(  char  *filename,  int  access,  int  permission  );
</i></pre>

<p>The available access modes are </p>

<pre><i>
	O_RDONLY		O_WRONLY		O_RDWR
	O_APPEND		O_BINARY		O_TEXT
</i></pre>

<p>The permissions are </p>

<pre><i>
	S_IWRITE	S_IREAD	S_IWRITE | S_IREAD
</i></pre>

<p>The <i>open()</i> function returns an integer value, which is
used to refer to the file. If un- successful, it returns -1, and
sets the global variable <i>errno</i> to indicate the error type.</p>

<hr>

<p><b>read()</b><br>
</p>

<pre><i>
	#include  &lt;fcntl.h&gt;
	int  read(  int  handle,  void  *buffer,  int  nbyte );
</i></pre>

<p>The <i>read()</i> function attempts to read nbytes from the
file associated with handle, and places the characters read into <i>buffer</i>.
If the file is opened using O_TEXT, it removes carriage returns
and detects the end of the file.</p>

<p>The function returns the number of bytes read. On end-of-file,
0 is returned, on error it returns -1, setting errno to indicate
the type of error that occurred.</p>

<hr>

<p><b>write()</b><br>
</p>

<pre><i>
	#include  &lt;fcntl.h&gt;
	int  write(  int  handle,  void  *buffer,  int  nbyte  );
</i></pre>

<p>The <i>write()</i> function attempts to write nbytes from <i>buffer</i>
to the file associated with handle. On text files, it expands
each LF to a CR/LF.</p>

<p>The function returns the number of bytes written to the file.
A return value of -1 indicates an error, with errno set
appropriately.</p>

<hr>

<p><b>close()</b><br>
</p>

<pre><i>
	#include  &lt;fcntl.h&gt;
	int  close(  int  handle  );
</i></pre>

<p>The <i>close()</i> function closes the file associated with
handle. The function returns 0 if successful, -1 to indicate an
error, with errno set appropriately.</p>

<hr>

<p>©Copyright B Brown. 1984-1999. All rights reserved.<br>
<a href="default.htm"><img src="images/menu.gif" width="60"
height="20"></a> <a href="c_074.htm"><img
src="images/previous.gif" width="60" height="20"></a> <a
href="c_075a.htm"><img src="images/next.gif" width="60"
height="20"></a></p>
</body>
</html>
